@page "/organiseTournament/{tournamentId:guid}"
@inject NavigationManager NavigationManager
@inject IGroupService GroupService
@inject IPlayerService PlayerService
@inject States.TournamentState TournamentState
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h1>
    Organise tournament @TournamentState.TournamentDto.Name
</h1>

@if (TournamentState.TournamentDto.Seeding == "Custom")
{
    <h2>Add all the players to your custom groups!</h2>

    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label for="Name" class="control-label">Group name</label>
                    <input for="Name" class="form-control" @bind-value="@group.Name" />

                    <label for="Name" class="control-label">Participant name</label>
                    <input for="Name" class="form-control" @bind-value="@participant.Name" />

                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="CreateGroupAsync">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="GoBack">Go back</button>
                </div>
            </form>
        </div>
    </div>
}
else
{
    <h2>Add all the players to your tournament!</h2>
    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label for="Name" class="control-label">Name</label>
                    <input for="Name" class="form-control" @bind-value="@group.Name" />

                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="CreateGroupAsync">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="GoBack">Cancel</button>
                </div>
            </form>
        </div>
    </div>
}

<table class="table table-bordered table-hover">
    <thead>
    <tr>
        <th class="sort-th">
            Name
            <span class="fa"></span>
        </th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @if (TournamentState.TournamentDto.Groups.Count == 0)
    {
        <tr>
            <td colspan="3">
                No Records to display
            </td>
        </tr>
    }
    else
    {
        foreach (GroupDto g in TournamentState.TournamentDto.Groups)
        {
            <tr>
                <td>@g.Name</td>

                <td>
                    <a class="btn btn-success" @onclick="NavigateToMatch">Start tournament</a>
                </td>
            </tr>
        }
    }

    </tbody>
</table>

@code {
    GroupDto group = new GroupDto();
    ParticipantDto participant = new ParticipantDto();
    

    [Parameter]
    public Guid tournamentId { get; set; }

    protected async Task CreateGroupAsync()
    {
        group.Id = Guid.NewGuid();
        participant.Id = Guid.NewGuid();
        group.TournamentId = tournamentId;
        await GroupService.CreateGroupAsync(group);
        await PlayerService.CreatePlayerAsync(participant);
        NavigationManager.NavigateTo("/organiseTournament");
    }

    void GoBack()
    {
        NavigationManager.NavigateTo("/fetchTournament");
    }

    void NavigateToMatch()
    {
        NavigationManager.NavigateTo("/playTournament");
    }
}