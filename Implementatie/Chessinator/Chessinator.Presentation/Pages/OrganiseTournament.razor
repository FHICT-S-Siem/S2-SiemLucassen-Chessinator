@page "/organiseTournament/{tournamentId:guid}"
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.AspNetCore.Mvc.Formatters
@using Chessinator.Domain.Entities
@using System.Runtime.CompilerServices
@using System.ComponentModel
@inject NavigationManager NavigationManager
@inject IGroupService GroupService
@inject IPlayerService PlayerService
@inject States.TournamentState TournamentState
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JsRuntime;

<style>
    h1 {
        text-align: center
    }

    input {
        margin-top: 5px
    }

    .form-select {
        margin-top: 5px;
        margin-right: 5px;
    }

    .btn {
        color: white !important;
    }

    .btn-success {
        color: white;
    }
</style>

<h1>
    Organise tournament - @TournamentState.TournamentDto.Name
</h1>

@if (TournamentState.TournamentDto.Seeding == "Custom")
{
    <h2 style="align-self: center">Add all the players to your custom groups!</h2>

    <div class="row">
        <div class="col-md-6">
            <br />
            <button class="btn btn-primary" @onclick="AddRow">Add participant field</button>
            <br />
            <br />
            <EditForm Model="MyForm">
                <ul>
                    @foreach (ParticipantDto player in MyForm.Players)
                    {
                        <li style="list-style: none">
                            <input for="Name" placeholder="Participant name" class="form-control" @bind-value="@player.Name" />
                        </li>
                    }
                </ul>
                <button type="button" class="btn btn-primary" @onclick="CreatePlayerAsync">Save</button>
            </EditForm>
        </div>
        <div class="col-md-6">
            @if (_participants == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <th class="sort-th">
                                Name
                                <span class="fa"></span>
                            </th>
                            <th class="sort-th">
                                Action
                                <span class="fa"></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_participants.Count == 0)
                        {
                            <tr>
                                <td colspan="3">
                                    No Records to display
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (ParticipantDto p in _participants)
                            {
                            <tr>
                                <td>
                                    @p.Name
                                </td>
                                <td>                            
                                    <a class="btn btn-danger" @onclick="() => DeletePlayerAsync(p.Id)">Delete</a>
                                </td>
                            </tr>
                            }
                        }
                    </tbody>
                </table>

            }
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-md-6">
            <button class="btn btn-primary" @onclick="AddGroup">Add Group</button>
            <br />
            <br />
            <EditForm Model="MyForm">
                <ul>

                    @foreach (GroupDto group in MyForm.Groups)
                    {
                        <li style="list-style: none">
                            <div class="row">
                            <input for="Name" placeholder="Group name" class="form-control" @bind-value="@group.Name"/>
                            
                                <InputSelect id="participants" class="form-select" style="width:auto;" @bind-Value="@group.Participant1">
                                    <option>Select Player...</option>
                                    @foreach (ParticipantDto participant in _participants)
                                    {
                                        <option title="Participant-1" value="@participant.Name">@participant.Name</option>
                                    }
                                </InputSelect>
                                <InputSelect id="participants" class="form-select" style="width:auto;" @bind-Value="@group.Participant2">
                                    <option>Select Player...</option>
                                    @foreach (ParticipantDto participant in _participants)
                                    {
                                        <option title="Participant-2" value="@participant.Name">@participant.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            
                        </li>
                    }
                </ul>
                <button type="button" class="btn btn-primary" @onclick="CreateGroupAsync">Save</button>
            </EditForm>
        </div>
    </div>
    <br />
}
else
{
    @*<h2>Add all the players to your tournament!</h2>
        <div class="row">
            <div class="col-md-4">
                <form>
                    <div class="form-group">
                        <label for="Name" class="control-label">Name</label>
                        <input for="Name" class="form-control" @bind-value="@group.Name" />

                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-primary" @onclick="CreateGroupAsync">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="GoBack">Cancel</button>
                    </div>
                </form>
            </div>
        </div>*@
}
<div class="row">
    <div class="col-6">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th class="sort-th">
                        Name
                        <span class="fa"></span>
                    </th>
                    <th class="sort-th">
                        Participant-1
                    </th>
                    <th class="sort-th">
                        Participant-2
                    </th>
                    <th class="sort-th">
                        Action
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (_groups.Count == 0)
                {
                    <tr>
                        <td colspan="3">
                            No Records to display
                        </td>
                    </tr>
                }
                else
                {
                    foreach (GroupDto g in _groups)
                    {
                        <tr>
                            <td>@g.Name</td>
                            <td>@g.Participant1</td>
                            <td>@g.Participant2</td>
                            <td>                            
                                <a class="btn btn-danger" @onclick="() => DeleteGroupAsync(g.Id)">Delete</a>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>
<br />
<div class="row">
    <div class="col-12">
        <a class="btn btn-success" @onclick="NavigateToMatch">Start tournament</a>
    </div>
</div>
@code {
    public class OrganiseTournamentForm
    {
        public List<GroupDto> Groups { get; set; } = new List<GroupDto>();
        public List<ParticipantDto> Players { get; set; } = new List<ParticipantDto>();
    }

    //[TypeConverter(typeof(List<ParticipantDto>))]
    List<ParticipantDto> _participants = new List<ParticipantDto>();
    List<GroupDto> _groups = new List<GroupDto>();

    OrganiseTournamentForm MyForm = new OrganiseTournamentForm();

    [Parameter]
    public Guid TournamentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _participants = await PlayerService.GetPlayersByTournamentIdAsync(TournamentId);
        _groups = await GroupService.GetGroupsByTournamentIdAsync(TournamentId);
        AddRow();
        AddRow();
        AddGroup();
        StateHasChanged();
    }

    private void AddRow()
    {
        MyForm.Players.Add(new ParticipantDto { Name = "" });
    }

    private void AddGroup()
    {
        MyForm.Groups.Add(new GroupDto() { Name = "" });
    }

    protected async Task CreatePlayerAsync()
    {
        foreach (ParticipantDto player in MyForm.Players)
        {
            if (player.Name == String.Empty)
            {
                var alert = await JsRuntime.InvokeAsync<string>("alert", "Fill in all fields before registering a player");
                return;
            }

            if (await PlayerService.DoesPlayerExist(player.Name))
            {
                // show message.
                var alert = await JsRuntime.InvokeAsync<string>("alert", "Player name " + player.Name + " already exist.");

                // prevent form from submitting to form.
                return;
            }
        }

        foreach (ParticipantDto player in MyForm.Players)
        {
            player.Id = Guid.NewGuid();
            player.TournamentId = TournamentId;
            await PlayerService.CreatePlayerAsync(player);
            _participants.Add(player);
        }
        MyForm.Players.Clear();
        AddRow();
        NavigationManager.NavigateTo($"/organiseTournament/{TournamentId}");
    }

    protected async Task CreateGroupAsync()
    {
        foreach (GroupDto group in MyForm.Groups)
        {
            if (group.Name == String.Empty || group.Participant1 == String.Empty || group.Participant2 == String.Empty)
            {
                string alert = await JsRuntime.InvokeAsync<string>("alert", "Fill in all fields before registering a group");
                return;
            }

            if (await GroupService.DoesGroupExist(group.Name))
            {
                // show message.
                string alert = await JsRuntime.InvokeAsync<string>("alert", "Group name " + group.Name + " already exist.");

                // prevent form from submitting to form.
                return;
            }

            if (await GroupService.DoesGroupExist(group.Participant1))
            {
                // show message.
                string alert = await JsRuntime.InvokeAsync<string>("alert", "Participant " + group.Participant1 + " is already in a group.");

                // prevent form from submitting to form.
                return;
            }

            if (await GroupService.DoesGroupExist(group.Participant2))
            {
                // show message.
                string alert = await JsRuntime.InvokeAsync<string>("alert", "Participant " + group.Participant2 + " is already in a group.");

                // prevent form from submitting to form.
                return;
            }
        }

        foreach (var group in MyForm.Groups)
        {
            group.Id = Guid.NewGuid();
            group.TournamentId = TournamentId;
            await GroupService.CreateGroupAsync(group);
            _groups.Add(group);
        }
        MyForm.Groups.Clear();
        AddGroup();
        NavigationManager.NavigateTo($"/organiseTournament/{TournamentId}");
    }

    protected async Task DeletePlayerAsync(Guid id)
    {
        await PlayerService.DeletePlayerAsync(id);
        _participants = await PlayerService.GetPlayersByTournamentIdAsync(TournamentId);
    }

    protected async Task DeleteGroupAsync(Guid id)
    {
        await GroupService.DeleteGroupAsync(id);
        _groups = await GroupService.GetGroupsByTournamentIdAsync(TournamentId);
    }

    void GoBack()
    {
        NavigationManager.NavigateTo("/fetchTournament");
    }

    void NavigateToMatch()
    {
        NavigationManager.NavigateTo("/playTournament");
    }
}