@page "/"
@using System.Security.Claims
@using Chessinator.Application.Dtos.Responses
@using Chessinator.Presentation.Authorization
@using Microsoft.AspNetCore.Http


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Log in on Chessinator!</h3>
        <h3>@Message</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.Username" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        <a href="/signup" class="col-3">Sign up</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {
    private string Message { get; set; }
    private LoginDto user;
    public string LoginMesssage { get; set; }
    ClaimsPrincipal claimsPrincipal;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = new LoginDto();

        claimsPrincipal = (await authenticationStateTask).User;

        if (claimsPrincipal.Identity != null && claimsPrincipal.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/index");
        }
        {
            user.Username = "Admin";
            user.Password = "test";
        }
    }

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid

        LoginResponseDto response = await userService.LoginAsync(user);

        

        if (response.Success)
        {
            //response.Data = UserDto
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(response.Data);
            await sessionStorage.SetItemAsync("username", response.Data.Username);
            await sessionStorage.SetItemAsync("userGuid", response.Data.Id);
            NavigationManager.NavigateTo("/index");
        }

        else
        {
            LoginMesssage = "Invalid username or password";
            if (response.Message != String.Empty)
            {
                Message = response.Message;
            }
        }

        return await Task.FromResult(true);
    }

}


