@page "/fetchTournament"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject ITournamentService TournamentService
@inject States.TournamentState TournamentState
@inject IJSRuntime JsRuntime;


<style>
    .btn {
        color: white !important;
    }
</style>

<div>
    <a class="btn btn-primary" href='/addTournament'>Add tournament</a>
</div>
<br />

@if (_tournaments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th">
                    Name
                    <span class="fa"></span>
                </th>
                <th class="sort-th">
                    Type
                    <span class="fa"></span>
                </th>
                <th class="sort-th">
                    Seeding
                    <span class="fa"></span>
                </th>
                <th class="sort-th">
                    Time
                    <span class="fa"></span>
                </th>
                <th class="sort-th">
                    Created at
                    <span class="fa"></span>
                </th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (_tournaments.Count == 0)
            {
                <tr>
                    <td colspan="3">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                foreach (TournamentDto t in _tournaments)
                {
                    <tr>
                        <td>@t.Name</td>
                        <td>@t.Type</td>
                        <td>@t.Seeding</td>
                        <td>@t.Time</td>
                        <td>@t.DateTime</td>

                        <td>
                            <a class="btn btn-primary" href='/editTournament/@t.Id'>Edit</a>  |
                            <a class="btn btn-danger" @onclick="() => DeleteTournamentAsync(t.Id)">Delete</a>  |
                            <a class="btn btn-success" @onclick="() => NavigateToOrganiseTournament(t)">Organise Tournament</a>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
}


@code {
    List<TournamentDto> _tournaments;

    private void NavigateToOrganiseTournament(TournamentDto tournamentDto)
    {
        TournamentState.TournamentDto = tournamentDto;
        NavigationManager.NavigateTo($"/organiseTournament/{tournamentDto.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        Guid userId = await SessionStorage.GetItemAsync<Guid>("userGuid");
        try
        {
            _tournaments = await TournamentService.GetTournamentsByUserIdAsync(userId);
        }
        catch (Exception e)
        {
            var alert = await JsRuntime.InvokeAsync<string>("alert", e.Message);
        }
    }

    protected async Task DeleteTournamentAsync(Guid id)
    {
        try
        {
            await TournamentService.DeleteTournamentAsync(id);

        }
        catch (Exception e)
        {
            var alert = await JsRuntime.InvokeAsync<string>("alert", e.Message);
        }


        Guid userId = await SessionStorage.GetItemAsync<Guid>("userGuid");
        _tournaments = await TournamentService.GetTournamentsByUserIdAsync(userId);
    }
}
